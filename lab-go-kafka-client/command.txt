docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)

docker network ls --filter driver=bridge --format "{{.ID}}" | xargs docker network inspect --format "route {{range .IPAM.Config}}{{.Subnet}}{{end}}" >> /usr/local/etc/docker-connector.conf

## kafka-topics.sh
/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --topic testIdempotence2 --partitions 3 --replication-factor 2
/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --describe --topic testIdempotence2
/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --delete --topic testIdempotence

## 获取消费者组的消费情况
/opt/bitnami/kafka/bin/kafka-consumer-groups.sh --bootstrap-server kafka:9092 --group demo_consumer_group --describe

## 生产者和消费者
/opt/bitnami/kafka/bin/kafka-console-producer.sh --bootstrap-server kafka:9092 --topic testIdempotence
/opt/bitnami/kafka/bin/kafka-console-consumer.sh --bootstrap-server kafka:9092 --topic testIdempotence --group test
/opt/bitnami/kafka/bin/kafka-console-consumer.sh --bootstrap-server kafka:9092 --topic testIdempotence --group test --from-beginning