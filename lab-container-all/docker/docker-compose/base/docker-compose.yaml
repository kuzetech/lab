version: "3.8"
services:
  nginx: 
    image: busybox:latest               ## 指定容器镜像的地址
    build:
      context: .                        ## 构建执行的上下文目录
      dockerfile: Dockerfile-name       ## Dockerfile 名称
    entrypoint:                         ## 覆盖容器的 entrypoint 命令，务必使用 exec 模式
      - "sleep"
      - "3000"
    command:                            ## 用于覆盖容器默认的启动命令，务必使用 exec 模式
      - "sleep"
      - "3000"
    container_name: nginx               ## 用于指定容器启动时容器的名称
    environment:                        ## 指定容器启动时的环境变量
      - KEY_ENV=values
    env_file:                           ## 指定容器的环境变量文件，启动时会把该文件中的环境变量值注入容器中
      - ./dbs.env                       ## env 文件的内容格式如: KEY_ENV=values
    depends_on:                         ## 用于指定服务间的依赖关系，这样可以先启动被依赖的服务
      - db
    ports:                              ## 暴露端口信息，使用格式为 HOST:CONTAINER，前面填写要映射到主机上的端口，后面填写对应的容器内的端口
      - "1000"
      - "1000-1005"
      - "8080:8080"
      - "8888-8890:8888-8890"
      - "2222:22"
      - "127.0.0.1:9999:9999"
      - "127.0.0.1:3000-3005:3000-3005"
      - "6789:6789/udp"
    pid: host                           ## 共享主机的进程命名空间，像在主机上直接启动进程一样，可以看到主机的进程信息
    cap_add:                            ## 指定容器可以使用到哪些内核能力
      - NET_ADMIN
    cap_drop:
      - SYS_ADMIN
    devices:                            ## 挂载主机的设备到容器中
      - "/dev/sba:/dev/sda"
    dns:                                ## 自定义容器中的 dns 配置
      - 8.8.8.8
      - 114.114.114.114
    dns_search:                         ## 配置 dns 的搜索域
      - svc.cluster.com
      - svc1.cluster.com
    networks:                           ## 服务要使用的网络名称，对应顶级的 networks 中的配置，可以同时加入多个网络
     - bridge-network-hello             ## 不需要指定额外配置
     - bridge-network-other:            ## 需要指定额外配置
         ipv4_address: 172.17.1.11
    volumes:                            ## 不仅可以挂载主机数据卷到容器中，也可以直接挂载主机的目录到容器中，使用方式类似于使用docker run启动容器时添加 -v 参数
      - "/var/lib/mysql:/var/lib/mysql" ## 主机目录挂载，短语法
      - type: volume                    ## 主机目录挂载，长语法
        source: /var/lib/mysql
        target: /var/lib/mysql
      - "logdata:/var/lib/mysql"        ## 共享卷，短语法
      - type: volume                    ## 共享卷，长语法
        source: logdata                 
        target: /var/log/mylog

volumes:                                ## 声明数据卷，通常想在多个容器间共享数据卷才需要在外部声明
  logdata: {}                           ## 可以挂载到多个 service 中共享数据卷

networks:                               ## 声明的自定义的网络，会调用 docker network create 命令自动帮你创建
                                        ## 不声明的话，会自动生成一个 network，所有 service 默认加入同一个
  bridge-network-hello:
    driver: bridge
    ipam: 
      driver: default
      config:
        subnet: 172.16.1.0/24
  bridge-network-other:
    driver: bridge
    ipam: 
      driver: default
      config:
        subnet: 172.17.1.0/24